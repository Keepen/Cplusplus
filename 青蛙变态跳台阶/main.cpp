#include <iostream>
using namespace std;

//题目描述：已知青蛙一次可以跳1，2，...，n级台阶，
//	问：跳到第n级台阶有多少种跳法


//分析： 初始状态:
//		f(1) = 1;
//		f(2) = 2;
//		f(3) = 4;

//方法一：
//	理解： 跳到第n级台阶：
//		1.如果最后一步跳 1 级 -- 那么方法数目就是f(n - 1)
//		2.如果最后一步跳 2 级 -- 那么方法数目就是f(n - 2) 
//		...
//		3.如果最后一步跳 n 级 -- 那么方法数就是 1 .
//	故： f(n) = f(n - 1) + f(n - 2) + f(n - 3) + ... + f(1)
//			f(n - 1) = f(n - 2) + f(n - 3) + ... + f(1)
//		所以：f(n) = 2 * f(n - 1);


//方法二：
//对于每一级台阶来说，只有两种可能性--要么跳到，要么没有跳到
//	最后一级台阶是必须要跳到的，那么总的方法数就是，
//	前n - 1级台阶的所有的是否被调的可能性的总和
//	f(n) = 2 ^ (n - 1)



int jumpFloor(int number) {
	return 1 << (number - 1);
}


int main() {

	int n;
	while (cin >> n) {
		cout << jumpFloor(n) << endl;
	}
	system("pause");
	return 0;
}